import logging
import configparser 
import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters, PicklePersistence
from telegram.ext.callbackcontext import CallbackContext
from threading import Thread
import os
from emoji import emojize
from db import User
import time

def check_done(update, context):
    if str(context.user_data.get('question_num','0')) != '6':
        pass
    else:
        dene(update, context)
    

def start(update, context):
    if str(context.user_data.get('question_num','0')) == '0':
        if context.user_data.get('id'):
            print('user is exists: ' + str(context.user_data['id']))
        else:
            context.user_data['id'] = update.message.chat.id
        print('context.user_data: ' + str(context.user_data))
        
        update.message.reply_text(text='–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç!',reply_markup=ReplyKeyboardRemove())
        
        keyboard = []
        
        update.message.reply_text(config['message']['start'])
        
        agree = config['message']['agree']
        agree_msq = config['message']['agree_msq']
        agree_btn = config['message']['agree_btn']
        if agree and agree_msq and agree_btn:
            if os.path.isfile(agree):
                
                keyboard.append([InlineKeyboardButton(text=emojize(':heavy_check_mark:', use_aliases=True) + agree_btn, callback_data=str(AGREE))])
                reply_markup = InlineKeyboardMarkup(keyboard)   
                
                doc = open(agree, 'rb')
                context.bot.send_document(update.message.chat.id, doc)
                doc.close()
                update.message.reply_text(text=agree_msq, reply_markup=reply_markup)
        
        return AGREE
    else:
        dene(update, context)
            

def agree(update, context):
    print('agree start')
    print('agree context.user_data: ' + str(context.user_data))
    user = update.callback_query.from_user
    id = user.id
    first_name = user.first_name
    last_name = user.last_name
    username = user.username
    
    context.user_data['first_name'] = first_name
    context.user_data['last_name'] = last_name
    context.user_data['username'] =username
    print(context.user_data)
    
    user, created = User.get_or_create(id=id, first_name=first_name, last_name=last_name, username=username)
    print(str(user) + ', created: ' + str(created))
    update.callback_query.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç.', callback_data=str(PHONE))
    
    return NAME
     
     
def name(update, context):
    print('name work start')
    print('name user_data: ' + str(context.user_data))
    
    client_name =  update.message.text
    
    if len(client_name) < 2:
        update.message.reply_text('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return NAME
        
    User.update(client_name=client_name).where(User.id == context.user_data.get('id')).execute()
    print('name work end')
    
    reply_keyboard = [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact=True)]]
    update.message.reply_text('–ù–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω¬ª', reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    
    return PHONE
    
    
def phone(update, context):
    print('phone start')
    print('phone user_data: ' + str(context.user_data))
    
    User.update(phone=update.message.contact.phone_number).where(User.id == context.user_data.get('id')).execute()
    update.message.reply_text(text='–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –ø–æ—á—Ç—É', reply_markup=ReplyKeyboardRemove())
    print('phone end')
    return EMAIL
    
    
def email(update, context):
    print('email start')
    print('email user_data: ' + str(context.user_data))
    
    client_email =  update.message.text
    if '@' not in client_email:
        update.message.reply_text('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return EMAIL
    
    User.update(email=client_email).where(User.id == context.user_data.get('id')).execute()
    
    keyboard = []
    keyboard.append([InlineKeyboardButton(text='–î–ê', callback_data=str(QUIZ))])
    reply_markup = InlineKeyboardMarkup(keyboard)   
            
    update.message.reply_text(text='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ' + emojize(':slightly_smiling_face:', use_aliases=True) + '\n–ò—Ç–∞–∫, 5 –∑–∞–¥–∞–Ω–∏–π –∏ –º–µ—Ä—á —Ç–≤–æ–π!\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?', reply_markup=reply_markup)
    
    print('email end')
    # context.user_data['quiz'] = 'start'
    return QUIZ    
    
    
def quiz(update, context):
    print('quiz start')
    print('quiz user_data: ' + str(context.user_data))
    
    choise = context.user_data.get('quiz', 'start')
    
    if choise == 'start':
        keyboard = []
        keyboard.append([InlineKeyboardButton(text='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üë®‚Äçüíª', callback_data=('technologies'))])
        keyboard.append([InlineKeyboardButton(text='–û—Ñ–∏—Å üè¶', callback_data=('office'))])
        keyboard.append([InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ üë©‚Äçüíºüí∞üë®‚Äçüíº' + emojize(':slightly_smiling_face:', use_aliases=True), callback_data=('sales'))])
        
        reply_markup = InlineKeyboardMarkup(keyboard)   
        update.callback_query.message.reply_text(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è', reply_markup=reply_markup)
    
    print('quiz end')
    return QUIZ


def subcrible(update):
    update.callback_query.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –í—Å—Ç—É–ø–∞–π –≤ –ù–∞—à –∫–∞–Ω–∞–ª @IT_Sber_EKB', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url="t.me/IT_Sber_EKB")]]))
    

def technologies(update, context):
    check_done(update, context)
    
    User.update(test_name='technologies').where(User.id == context.user_data.get('id')).execute()
    print('technologies start')
    print('technologies user_data: ' + str(context.user_data))
    
    question_num = context.user_data.get('question_num', '0')
    
    data = update.callback_query.data
    print('technologies data: ' + str(data))
    
    try:
        answer = data.split(':')[1]
    except:
        answer = context.user_data.get('answer', '')
    print('question_num:{}, answer: {}'.format(question_num, answer))
    
    if question_num in ('0', '1'):
        question_text = '–≠—Ä—É–¥–∏—Ç –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –±—É—Ç—ã–ª–∫—É —Å –ø—Ä–æ–±–∫–æ–π 11 —Ä—É–±–ª–µ–π. –ë—É—Ç—ã–ª–∫–∞ —Å—Ç–æ–∏—Ç –Ω–∞ 10 —Ä—É–±–ª–µ–π –¥–æ—Ä–æ–∂–µ —á–µ–º –ø—Ä–æ–±–∫–∞. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–±–∫–∞?'
        question_answers = [
            '1 —Ä—É–±.',
            '0.50 –∫–æ–ø.',
            '0.25 –∫–æ–ø.',
            '0.75 –∫–æ–ø.',
        ]
        if question_num == '0':
            context.user_data['question_num'] = '1'
            
        if not answer:
            subcrible(update)
            
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('technologies:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)
            time.sleep(2)
            
            try:
                if answer == '1':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '2'
            question_num = '2'
            answer = ''
            
    if question_num in ('2'):
        question_text = '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‚Äì —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ) —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?'
        question_answers = [
            '–°–∫–ª–∞–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            '–ë–∞–∑–∞',
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            '–•—Ä–∞–Ω–∏–ª–∏—â–µ',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append([InlineKeyboardButton(text=i, callback_data=('technologies:' + str(n)))])
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '2':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '3'
            question_num = '3'
            answer = ''
            
    if question_num in ('3'):
        question_text = '–ü–æ —Ç–∏–ø—É —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª—è—é—Ç –Ω–∞:\n\n' + \
        '1. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ, —Å–µ—Ç–µ–≤—ã–µ, —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ, –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n' + \
        '2. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ\n' + \
        '3. –ú–æ–¥—É–ª—å–Ω—ã–µ, –º–æ–¥–µ–º–Ω—ã–µ –∏ —Å–µ—Ç–µ–≤—ã–µ\n' + \
        '4. –û—Å–Ω–æ–≤–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ'
        question_answers = [
            '1',
            '2',
            '3',
            '4',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('technologies:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '0':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '4'
            question_num = '4'
            answer = ''    
    
    if question_num in ('4'):
        question_text = '–° —á–µ–≥–æ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?\n\n' + \
        '1. –° –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n' + \
        '2. –° —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n' + \
        '3. –° —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n' + \
        '4. –° —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ–µ —Ç–∞–±–ª–∏—Ü'
        question_answers = [
            '1',
            '2',
            '3',
            '4',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('technologies:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '3':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '5'
            question_num = '5'
            answer = '' 
            
    if question_num in ('5'):
        question_text = '–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è SQL?\n\n1. structured question line\n2. structured query language\n3. strict question line\n4. strong question language'
        question_answers = [
            '1',
            '2',
            '3',
            '4',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('technologies:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '1':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '6'
            question_num = '6'
            answer = ''
            
    if question_num in ('6'):
        dene(update, context)
    
    print('question_ok:' + str(context.user_data.get('question_ok')))
    return QUIZ
    
def dene(update, context):
    try:
        message = update.callback_query.message
    except:
        message = update.message
    message.reply_text(text='–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ '+ str(context.user_data.get('question_ok', '0')) + ' –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ 5!',  parse_mode=telegram.ParseMode.MARKDOWN)
    message.reply_text(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ! –ü–æ–¥–æ–π—Ç–∏ –Ω–∞ —Å—Ç–æ–π–∫—É –°–±–µ—Ä–±–∞–Ω–∫–∞, –ø–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∏ —Å–≤–æ–π –º–µ—Ä—á –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Ä—é–∫–∑–∞–∫–∞. –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤ *19.00 –∏ 20:30* –Ω–∞ —Å—Ç–µ–Ω–¥–µ –°–±–µ—Ä–±–∞–Ω–∫–∞. –£–¥–∞—á–∏!',  parse_mode=telegram.ParseMode.MARKDOWN)
    
     
def office(update, context):
    check_done(update, context)
    
    User.update(test_name='office').where(User.id == context.user_data.get('id')).execute()
    print('office start')
    print('office user_data: ' + str(context.user_data))
    
    question_num = context.user_data.get('question_num', '0')
    
    data = update.callback_query.data
    print('office data: ' + str(data))
    
    try:
        answer = data.split(':')[1]
    except:
        answer = context.user_data.get('answer', '')
    print('question_num:{}, answer: {}'.format(question_num, answer))
    
    if question_num in ('0', '1'):
        question_text = '–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:\n\n1. —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n2. —Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n3. –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º\n4. –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'
        question_answers = [
            '1',
            '2',
            '3',
            '4',
        ]
        if question_num == '0':
            context.user_data['question_num'] = '1'
            
        if not answer:
            subcrible(update)
            
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('office:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
            
            try:
                if answer == '2':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '2'
            question_num = '2'
            answer = ''
            
    if question_num in ('2'):
        question_text = '–ù–∞–∏–º–µ–Ω—å—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ–π –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã —è–≤–ª—è–µ—Ç—Å—è...'
        question_answers = [
            '—Å—Ç—Ä–æ–∫–∞',
            '—è—á–µ–π–∫–∞',
            '—Å—Ç–æ–ª–±–µ—Ü',
            '–¥–∏–∞–ø–∞–∑–æ–Ω',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append([InlineKeyboardButton(text=i, callback_data=('office:' + str(n)))])
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '1':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '3'
            question_num = '3'
            answer = ''
            
    if question_num in ('3'):
        question_text = '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤ Microsoft Excel ‚Äì —ç—Ç–æ:'
        question_answers = [
            '.xls',
            '.doc',
            '.bmp',
            '.pptx',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append([InlineKeyboardButton(text=i, callback_data=('office:' + str(n)))])
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '0':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '4'
            question_num = '4'
            answer = ''
            
    if question_num in ('4'):
        question_text = '–ß—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫?\n\n' + \
        '1. –æ–Ω –¥–µ–ª–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n' + \
        '2. –æ–Ω –∑–∞—â–∏—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞–º–∏\n' + \
        '3. –æ–Ω —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Ç–µ–∫—Å—Ç\n' + \
        '4. –æ–Ω –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞'
        question_answers = [
            '1',
            '2',
            '3',
            '4',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('office:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '0':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '5'
            question_num = '5'
            answer = ''             
            
    if question_num in ('5'):
        question_text = '–ó–∞–¥–∞—á–∞ 5 –ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?'
        question_answers = [
            'Windows Word',
            'Microsoft Access',
            'Microsoft Excel',
            'Microsoft PowerPoint',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append([InlineKeyboardButton(text=i, callback_data=('office:' + str(n)))])
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '3':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '6'
            question_num = '6'
            answer = ''
            
    if question_num in ('6'):
        dene(update, context)
    
    print('question_ok:' + str(context.user_data.get('question_ok')))
    return QUIZ
                
     
     
def sales(update, context):
    check_done(update, context)
    
    User.update(test_name='sales').where(User.id == context.user_data.get('id')).execute()
    print('sales start')
    print('sales user_data: ' + str(context.user_data))
    
    question_num = context.user_data.get('question_num', '0')
    
    data = update.callback_query.data
    print('sales data: ' + str(data))
    
    try:
        answer = data.split(':')[1]
    except:
        answer = context.user_data.get('answer', '')
    print('question_num:{}, answer: {}'.format(question_num, answer))
    
    if question_num in ('0', '1'):
        question_text = '–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–Ω–µ–π —É —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ä–∞–Ω–¥–∞—à–∞?'
        question_answers = [
            '5',
            '8',
            '6',
            '4',
        ]
        if question_num == '0':
            context.user_data['question_num'] = '1'
            
        if not answer:
            
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('sales:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
            
            try:
                if answer == '1':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '2'
            question_num = '2'
            answer = ''
            
    if question_num in ('2'):
        question_text = '–ë–∞—Ç–æ–Ω —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –Ω–∞ 3 —á–∞—Å—Ç–∏. –°–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–∑—Ä–µ–∑–æ–≤?'
        question_answers = [
            '2',
            '3',
            '0',
            '1',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('sales:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '0':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '3'
            question_num = '3'
            answer = ''
            
    if question_num in ('3'):
        question_text = '–°–æ–±–∞–∫–∞-3, –∫–æ—à–∫–∞-3, –æ—Å–ª–∏–∫-2, —Ä—ã–±–∫–∞-0. –ß–µ–º—É —Ä–∞–≤–Ω—è–µ—Ç—Å—è –ø–µ—Ç—É—à–æ–∫?'
        question_answers = [
            '5',
            '6',
            '8',
            '4',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('sales:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '2':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '4'
            question_num = '4'
            answer = ''
            
    if question_num in ('4'):
        question_text = '–û–¥–Ω–æ —è–π—Ü–æ –≤–∞—Ä–∏—Ç—Å—è 3 –º–∏–Ω—É—Ç—ã. –°–∫–æ–ª—å–∫–æ –±—É–¥—É—Ç –≤–∞—Ä–∏—Ç—Å—è 2 —è–π—Ü–∞?'
        question_answers = [
            '6',
            '0',
            '2',
            '3',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append(InlineKeyboardButton(text=i, callback_data=('sales:' + str(n))))
            reply_markup = InlineKeyboardMarkup([keyboard])
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '3':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '5'
            question_num = '5'
            answer = ''             
            
    if question_num in ('5'):
        question_text = '–¢–µ—Ä–º–∏–Ω ¬´—Ñ–∏–Ω–∞–Ω—Å—ã¬ª –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç?'
        question_answers = [
            '–î–µ–Ω–µ–∂–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
            '–î–æ–ª–≥',
            '–ì–ª–∞–≤–Ω—ã–π, –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π',
            '–û—Å–Ω–æ–≤–Ω–æ–π',
        ]
        
        if not answer:
            keyboard = []
            for n, i in enumerate(question_answers):
                keyboard.append([InlineKeyboardButton(text=i, callback_data=('sales:' + str(n)))])
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
        else:
            update.callback_query.message.edit_text(text=question_text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

            time.sleep(2)
        
            try:
                if answer == '0':
                    context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
            except:
                pass
            
            context.user_data['question_num'] = '6'
            question_num = '6'
            answer = ''
            
    if question_num in ('6'):
        dene(update, context)
    
    print('question_ok:' + str(context.user_data.get('question_ok')))
    return QUIZ
    

if __name__=='__main__':
    
    logging.basicConfig(filename='bot.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.ERROR)
    # logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    AGREE, NAME, PHONE, EMAIL, QUIZ = range(5)
    
    config = configparser.ConfigParser()
    config.read('quiz.ini')
    
    token = config['bot']['token']
    proxy = config['bot']['proxy']
    
    REQUEST_KWARGS = {
        'proxy_url': proxy,
        'read_timeout': 60,
        'connect_timeout': 30
    }
    pp = PicklePersistence(filename='conversationbot')
    updater = Updater(token, use_context=True, persistence=pp, request_kwargs=REQUEST_KWARGS)
    dispatcher = updater.dispatcher
    context = CallbackContext(dispatcher)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGREE: [CallbackQueryHandler(agree, pattern='^' + str(AGREE) + '$')],
            NAME: [MessageHandler(Filters.text, name)],
            PHONE: [MessageHandler(Filters.contact, phone)],
            EMAIL: [MessageHandler(Filters.text, email)],
            QUIZ: [
                CallbackQueryHandler(quiz, pattern='^' + str(QUIZ) + '$'),
                CallbackQueryHandler(technologies, pattern='^technologies.*'),
                CallbackQueryHandler(office, pattern='^office.*'),
                CallbackQueryHandler(sales, pattern='^sales.*'),
                ]
        },
        fallbacks=[CommandHandler('start', start)],
        name="my_conversation",
        persistent=True
    )

    dispatcher.add_handler(conv_handler)

    
    updater.start_polling()
    updater.idle()