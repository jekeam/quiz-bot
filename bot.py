import logging
import configparser 
import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters, PicklePersistence
from telegram.ext.callbackcontext import CallbackContext
from threading import Thread
import os
from emoji import emojize
from db import User
import time

def check_done(update, context):
    qn = context.user_data.get('question_num','0')
    print(qn)
    if str(qn) != '6':
        pass
    else:
        done_send(update, context)
        return 'DONE'
    

def start(update, context):
    if check_done(update, context) == 'DONE':
        return DONE
    
    if context.user_data.get('id'):
        print('user is exists: ' + str(context.user_data['id']))
    else:
        context.user_data['id'] = update.message.chat.id
    print('context.user_data: ' + str(context.user_data))
    
    update.message.reply_text(text='–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç!',reply_markup=ReplyKeyboardRemove())
    
    keyboard = []
    
    update.message.reply_text(config['message']['start'])
    
    agree = config['message']['agree']
    agree_msq = config['message']['agree_msq']
    agree_btn = config['message']['agree_btn']
    if agree and agree_msq and agree_btn:
        if os.path.isfile(agree):
            
            keyboard.append([InlineKeyboardButton(text=emojize(':heavy_check_mark:', use_aliases=True) + agree_btn, callback_data=str(AGREE))])
            reply_markup = InlineKeyboardMarkup(keyboard)   
            
            doc = open(agree, 'rb')
            context.bot.send_document(update.message.chat.id, doc)
            doc.close()
            update.message.reply_text(text=agree_msq, reply_markup=reply_markup)
    
    return AGREE
    # else:
    #     done(update, context)
            

def agree(update, context):
    print('agree start')
    print('agree context.user_data: ' + str(context.user_data))
    check_done(update, context)
    user = update.callback_query.from_user
    id = user.id
    first_name = user.first_name
    last_name = user.last_name
    username = user.username
    
    context.user_data['first_name'] = first_name
    context.user_data['last_name'] = last_name
    context.user_data['username'] =username
    print(context.user_data)
    
    user, created = User.get_or_create(id=id, first_name=first_name, last_name=last_name, username=username)
    print(str(user) + ', created: ' + str(created))
    update.callback_query.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç.', callback_data=str(PHONE))
    
    return NAME
     
     
def name(update, context):
    print('name work start')
    print('name user_data: ' + str(context.user_data))
    check_done(update, context)
    client_name =  update.message.text
    
    if len(client_name) < 2:
        update.message.reply_text('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return NAME
        
    User.update(client_name=client_name).where(User.id == context.user_data.get('id')).execute()
    print('name work end')
    
    reply_keyboard = [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact=True)]]
    update.message.reply_text('–ù–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω¬ª', reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    
    return PHONE
    
    
def phone(update, context):
    print('phone start')
    print('phone user_data: ' + str(context.user_data))
    check_done(update, context)
    User.update(phone=update.message.contact.phone_number).where(User.id == context.user_data.get('id')).execute()
    update.message.reply_text(text='–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –ø–æ—á—Ç—É', reply_markup=ReplyKeyboardRemove())
    print('phone end')
    return EMAIL
    
    
def email(update, context):
    print('email start')
    print('email user_data: ' + str(context.user_data))
    check_done(update, context)
    client_email =  update.message.text
    if '@' not in client_email:
        update.message.reply_text('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return EMAIL
    
    User.update(email=client_email).where(User.id == context.user_data.get('id')).execute()
    
    keyboard = []
    answer = '–î–ê'
    keyboard.append([InlineKeyboardButton(text=answer, callback_data='q1')])
    reply_markup = InlineKeyboardMarkup(keyboard)   
            
    update.message.reply_text(text='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ' + emojize(':slightly_smiling_face:', use_aliases=True) + '\n–ò—Ç–∞–∫, 5 –∑–∞–¥–∞–Ω–∏–π –∏ –º–µ—Ä—á —Ç–≤–æ–π!\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?', reply_markup=reply_markup)
    
    print('email end')
    context.user_data['answer'] = answer
    return QUIZ
    
    
# def quiz(update, context):
#     print('quiz start')
#     print('quiz user_data: ' + str(context.user_data))
    
#     choise = context.user_data.get('quiz', 'start')
    
#     if choise == 'start':
#         keyboard = []
#         keyboard.append([InlineKeyboardButton(text='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üë®‚Äçüíª', callback_data=('technologies'))])
#         keyboard.append([InlineKeyboardButton(text='–û—Ñ–∏—Å üè¶', callback_data=('office'))])
#         keyboard.append([InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ üë©‚Äçüíºüí∞üë®‚Äçüíº' + emojize(':slightly_smiling_face:', use_aliases=True), callback_data=('sales'))])
        
#         reply_markup = InlineKeyboardMarkup(keyboard)   
#         update.callback_query.message.reply_text(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è', reply_markup=reply_markup)
    
#     print('quiz end')
#     return QUIZ


def subcrible(update):
    update.callback_query.message.reply_text(text='–û—Ç–ª–∏—á–Ω–æ! –í—Å—Ç—É–ø–∞–π –≤ –ù–∞—à –∫–∞–Ω–∞–ª @IT_Sber_EKB', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url="t.me/IT_Sber_EKB")]]))
    

def q1(update, context):
    check_done(update, context)
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n - ' + str(context.user_data.get('answer', '')),  parse_mode=telegram.ParseMode.MARKDOWN)
    
    question_text = '–≠—Ä—É–¥–∏—Ç –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –±—É—Ç—ã–ª–∫—É —Å –ø—Ä–æ–±–∫–æ–π 11 —Ä—É–±–ª–µ–π. –ë—É—Ç—ã–ª–∫–∞ —Å—Ç–æ–∏—Ç –Ω–∞ 10 —Ä—É–±–ª–µ–π –¥–æ—Ä–æ–∂–µ —á–µ–º –ø—Ä–æ–±–∫–∞. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–±–∫–∞?'
    question_answers = [
        '1 —Ä—É–±–ª—å',
        '50 –∫–æ–ø–µ–µ–∫',
        '25 –∫–æ–ø–µ–µ–∫',
        '75 –∫–æ–ø–µ–µ–∫',
    ]

    subcrible(update)
    
    keyboard = []
    for n, i in enumerate(question_answers):
        keyboard.append(InlineKeyboardButton(text=i, callback_data=('q2:' + str(n))))
    reply_markup = InlineKeyboardMarkup([keyboard])
    update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
    context.user_data['question_num'] = '1'
            
def q2(update, context):
    check_done(update, context)
    question_answers = [
        '1 —Ä—É–±–ª—å',
        '50 –∫–æ–ø–µ–µ–∫',
        '25 –∫–æ–ø–µ–µ–∫',
        '75 –∫–æ–ø–µ–µ–∫',
    ]
    answer = update.callback_query.data.split(':')[1]
        
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

    if answer == '1':
        context.user_data['question_ok'] = '1'
    
    question_text = '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ —Ç—ã –≤—ã—Ö–æ–¥–∏—à—å –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ –°–±–µ—Ä–±–∞–Ω–∫. –°–∫–∞–∂–∏ –≤ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç—ã –Ω–∞—á–Ω–µ—à—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ç—Ä–∏ –¥–Ω—è –Ω–∞–∑–∞–¥ –±—ã–ª –¥–µ–Ω—å, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É?'
    question_answers = [
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞',
    ]
    keyboard = []
    for n, i in enumerate(question_answers):
        keyboard.append([InlineKeyboardButton(text=i, callback_data=('q3:' + str(n)))])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
    context.user_data['question_num'] = '2'
            
def q3(update, context):
    check_done(update, context)
    question_answers = [
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞',
    ]
    answer = update.callback_query.data.split(':')[1]
        
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)

    if answer == '3':
        context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
    
    question_text = '–õ–∏—Å—Ç –±—É–º–∞–≥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≥–Ω—É–ª–∏ –ø–æ–ø–æ–ª–∞–º —à–µ—Å—Ç—å —Ä–∞–∑. –í —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —ç—Ç–æ–≥–æ —Å–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –ø—Ä–æ—Å–≤–µ—Ä–ª–∏–ª–∏ –Ω–∞—Å–∫–≤–æ–∑—å –¥–≤–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è. –°–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ—Å–ª–µ –µ–≥–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ?'
    question_answers = [
        '64',
        '128',
        '264',
        '12',
    ]
    

    keyboard = []
    for n, i in enumerate(question_answers):
        keyboard.append(InlineKeyboardButton(text=i, callback_data=('q4:' + str(n))))
    reply_markup = InlineKeyboardMarkup([keyboard])
    update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
    context.user_data['question_num'] = '3'
            
def q4(update, context):
    check_done(update, context)
    question_answers = [
        '64',
        '128',
        '264',
        '12',
    ]
    answer = update.callback_query.data.split(':')[1]
        
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)
    
    if answer == '1':
        context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
    
    question_text = '–¢—ã –±–µ–∂–∏—à—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –ó–µ–ª–µ–Ω–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ. –¢—ã –æ–±–æ–≥–Ω–∞–ª –±–µ–≥—É–Ω–∞, –∑–∞–Ω–∏–º–∞–≤—à–µ–≥–æ –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é. –ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å?'
    question_answers = [
        '–ü–µ—Ä–≤—É—é',
        '–í—Ç–æ—Ä—É—é',
    ]
    
    keyboard = []
    for n, i in enumerate(question_answers):
        keyboard.append(InlineKeyboardButton(text=i, callback_data=('q5:' + str(n))))
    reply_markup = InlineKeyboardMarkup([keyboard])
    update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
    context.user_data['question_num'] = '4'
            
def q5(update, context):
    check_done(update, context)
    question_answers = [
        '–ü–µ—Ä–≤—É—é',
        '–í—Ç–æ—Ä—É—é',
    ]
    answer = update.callback_query.data.split(':')[1]
        
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)
    
    if answer == '1':
        context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
    
    question_text = '–†–∞–∑–¥–µ–ª–∏ 30 –Ω–∞ ¬Ω –∏ –ø—Ä–∏–±–∞–≤—å 10. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–∏—Ç—Å—è?'
    question_answers = [
        '15',
        '45',
        '85',
        '70',
    ]
    
    keyboard = []
    for n, i in enumerate(question_answers):
        keyboard.append(InlineKeyboardButton(text=i, callback_data=('q6:' + str(n))))
    reply_markup = InlineKeyboardMarkup([keyboard])
    update.callback_query.message.reply_text(text=question_text, reply_markup=reply_markup)
    context.user_data['question_num'] = '5'
    
    
def q6(update, context):

    question_answers = [
        '15',
        '45',
        '85',
        '70',
    ]
    answer = update.callback_query.data.split(':')[1]
        
    update.callback_query.message.edit_text(text=update.callback_query.message.text + '\n\n–í–∞—à –æ—Ç–≤–µ—Ç: *' + str(question_answers[int(answer)]) + ' *',  parse_mode=telegram.ParseMode.MARKDOWN)
    
    if answer == '3':
        context.user_data['question_ok'] = int(context.user_data.get('question_ok', '0'))+1
    done_send(update, context)
    return DONE
    
    
def done_send(update, context):
    try:
        message = update.callback_query.message
    except:
        message = update.message
    message.reply_text(text='–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ '+ str(context.user_data.get('question_ok', '0')) + ' –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ 5!',  parse_mode=telegram.ParseMode.MARKDOWN)
    message.reply_text(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ! –ü–æ–¥–æ–π—Ç–∏ –Ω–∞ —Å—Ç–æ–π–∫—É –°–±–µ—Ä–±–∞–Ω–∫–∞, –ø–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∏ —Å–≤–æ–π –º–µ—Ä—á –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Ä—é–∫–∑–∞–∫–∞. –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤ *19.00 –∏ 20:30* –Ω–∞ —Å—Ç–µ–Ω–¥–µ –°–±–µ—Ä–±–∞–Ω–∫–∞. –£–¥–∞—á–∏!',  parse_mode=telegram.ParseMode.MARKDOWN)
    context.user_data['question_num'] = '6'

if __name__=='__main__':
    
    logging.basicConfig(filename='bot.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.ERROR)
    # logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    AGREE, NAME, PHONE, EMAIL, QUIZ, DONE = range(6)
    
    config = configparser.ConfigParser()
    config.read('quiz.ini')
    
    token = config['bot']['token']
    proxy = config['bot']['proxy']
    
    REQUEST_KWARGS = {
        'proxy_url': proxy,
        'read_timeout': 60,
        'connect_timeout': 30
    }
    pp = PicklePersistence(filename='conversationbot')
    updater = Updater(token, use_context=True, persistence=pp, request_kwargs=REQUEST_KWARGS)
    dispatcher = updater.dispatcher
    context = CallbackContext(dispatcher)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGREE: [CallbackQueryHandler(agree, pattern='^' + str(AGREE) + '$')],
            NAME: [MessageHandler(Filters.text, name)],
            PHONE: [MessageHandler(Filters.contact, phone)],
            EMAIL: [MessageHandler(Filters.text, email)],
            QUIZ: [
                CallbackQueryHandler(q1, pattern='^q1$'),
                CallbackQueryHandler(q2, pattern='^q2:\d$'),
                CallbackQueryHandler(q3, pattern='^q3:\d$'),
                CallbackQueryHandler(q4, pattern='^q4:\d$'),
                CallbackQueryHandler(q5, pattern='^q5:\d$'),
                CallbackQueryHandler(q6, pattern='^q6:\d$'),
                ],
            DONE: [
                CallbackQueryHandler(done_send, pattern='^DONE$'),
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        name="my_conversation",
        persistent=True
    )

    dispatcher.add_handler(conv_handler)

    
    updater.start_polling()
    updater.idle()